<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://wittawasw.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wittawasw.com/" rel="alternate" type="text/html" /><updated>2024-10-09T11:41:12+07:00</updated><id>https://wittawasw.com/feed.xml</id><title type="html">wittawasw</title><subtitle></subtitle><author><name>wittawasw</name><email>your-email@domain.com</email></author><entry><title type="html">Install torch-rb บน Ubuntu</title><link href="https://wittawasw.com/2024/10/08/install-torch-rb-in-ubuntu.html" rel="alternate" type="text/html" title="Install torch-rb บน Ubuntu" /><published>2024-10-08T12:18:00+07:00</published><updated>2024-10-08T12:18:00+07:00</updated><id>https://wittawasw.com/2024/10/08/install-torch-rb-in-ubuntu</id><content type="html" xml:base="https://wittawasw.com/2024/10/08/install-torch-rb-in-ubuntu.html"><![CDATA[<p>แก้ไขเพิ่มเติมจาก <a href="https://github.com/ankane/torch.rb">readme ของ torch-rb</a></p>

<h2 id="ดาวน์โหลดไฟล์-libtorch">ดาวน์โหลดไฟล์ libtorch</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># หา version ล่าสุดจากในนี้</span>
<span class="c"># https://download.pytorch.org/libtorch/cpu/</span>
curl <span class="nt">-L</span> https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.4.1%2Bcpu.zip <span class="o">&gt;</span> libtorch.zip

unzip <span class="nt">-q</span> libtorch.zip
<span class="c"># rm libtorch.zip # Optional</span>
</code></pre></div></div>

<h2 id="install-ผ่าน-gemfile">Install ผ่าน Gemfile</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle config build.torch-rb <span class="nt">--with-torch-dir</span><span class="o">=</span>/path/to/libtorch
bundle add torch-rb

<span class="c"># สามารถใช้ $(pwd)/relative_path/to/libtorch กับ --with-torch-dir ได้</span>
<span class="c"># เช่น bundle config build.torch-rb --with-torch-dir=$(pwd)/libtorch</span>
<span class="c"># หรือตั้งค่าเป็น global ด้วย</span>
<span class="c"># bundle config --global build.torch-rb --with-torch-dir=$(pwd)/libtorch</span>
</code></pre></div></div>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="ruby" /><category term="ml" /><summary type="html"><![CDATA[แก้ไขเพิ่มเติมจาก readme ของ torch-rb]]></summary></entry><entry><title type="html">เปลี่ยน git merge ไปใช้ diff3</title><link href="https://wittawasw.com/2024/10/06/git-diff-3.html" rel="alternate" type="text/html" title="เปลี่ยน git merge ไปใช้ diff3" /><published>2024-10-06T03:48:00+07:00</published><updated>2024-10-06T03:48:00+07:00</updated><id>https://wittawasw.com/2024/10/06/git-diff-3</id><content type="html" xml:base="https://wittawasw.com/2024/10/06/git-diff-3.html"><![CDATA[<p>ตั้งใจจะเปิดหาบทความที่สอนการดู <code class="language-plaintext highlighter-rouge">diff</code> ของ <code class="language-plaintext highlighter-rouge">git merge</code> เพราะปกติไม่เคยอธิบาย
เป็นคำพูดให้คนอื่นฟังเข้าใจได้เลย มีแต่ต้องทำให้ดู แล้วก็เพิ่งรู้ว่ามีแบบที่เข้าใจได้ง่ายกว่า เรียกว่า <code class="language-plaintext highlighter-rouge">diff3</code> ให้ใช้มาตั้งหลายปีแล้ว</p>

<h2 id="คำสั่งในการใช้เปลี่ยนรูปแบบ">คำสั่งในการใช้เปลี่ยนรูปแบบ</h2>

<p>ลองทำตามได้เลย ยังไม่ต้องรู้เรื่องก็ได้ เพราะมั่นใจว่าไม่เสียใจแน่นอน</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> merge.conflictstyle diff3

<span class="c"># หรือถ้าไม่แน่ใจก็ลองแค่ directory เดียวก่อน</span>
git config merge.conflictstyle diff3
</code></pre></div></div>

<p>ที่มา: <a href="https://stackoverflow.com/questions/27417656/should-diff3-be-default-conflictstyle-on-git">stackoverflow.com/questions/27417656</a></p>

<h2 id="ตัวอย่างของ-diff-จากการแก้-code">ตัวอย่างของ <code class="language-plaintext highlighter-rouge">diff</code> จากการแก้ code</h2>

<h3 id="ของเดิม">ของเดิม</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CalculateTotal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="อันที่เราแก้-head-current-change">อันที่เราแก้ (HEAD, Current Change)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CalculateTotal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="m">10</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="อันที่คนอื่นแก้มาแล้วเรากำลังจะ-merge-เข้า-incoming-change">อันที่คนอื่นแก้มาแล้วเรากำลังจะ merge เข้า (Incoming Change)</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CalculateTotal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="m">5</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="ได้ออกมาแบบนี้ตอน-conflict">ได้ออกมาแบบนี้ตอน conflict</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CalculateTotal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">HEAD</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="m">10</span>
<span class="o">=======</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="m">5</span>
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">branch</span><span class="o">-</span><span class="n">name</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>หลายๆครั้งเวลาเจอแบบนี้ในลักษณะที่ conflict กันหลายบรรทัด จะค่อนข้างสับสนพอสมควรว่าควรจะเลือกอันไหนดี</p>
</blockquote>

<h3 id="ถ้าใช้-diff3-จะได้-conflict-แบบนี้แทน">ถ้าใช้ <code class="language-plaintext highlighter-rouge">diff3</code> จะได้ conflict แบบนี้แทน:</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CalculateTotal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">HEAD</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="m">10</span>
<span class="o">|||||||</span> <span class="n">base</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="o">=======</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="m">5</span>
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">branch</span><span class="o">-</span><span class="n">name</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>สังเกตได้ว่าแทนที่จะมีแค่สองสถานะให้เรางงว่าจะเลือกอันไหนดี <code class="language-plaintext highlighter-rouge">diff3</code> จะเพิ่มสถานะ
<code class="language-plaintext highlighter-rouge">base</code> เข้ามาด้วยเพื่อให้เห็นว่าจุดตั้งต้นก่อนที่จะ conflict มันคืออะไรมาก่อน
เพื่อช่วยเพิ่มข้อมูลตัดสินใจว่าควรจะเลือกอันไหนดี</p>
</blockquote>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="devtool" /><category term="git" /><summary type="html"><![CDATA[ตั้งใจจะเปิดหาบทความที่สอนการดู diff ของ git merge เพราะปกติไม่เคยอธิบายเป็นคำพูดให้คนอื่นฟังเข้าใจได้เลย มีแต่ต้องทำให้ดู แล้วก็เพิ่งรู้ว่ามีแบบที่เข้าใจง่ายกว่า เรียกว่า diff3 ให้ใช้มาตั้งหลายปีแล้ว]]></summary></entry><entry><title type="html">ใช้ timedatectl ตั้งค่า datetime ในเครื่อง Ubuntu</title><link href="https://wittawasw.com/2024/09/27/set-datetime-in-ubuntu.html" rel="alternate" type="text/html" title="ใช้ timedatectl ตั้งค่า datetime ในเครื่อง Ubuntu" /><published>2024-09-27T12:57:00+07:00</published><updated>2024-09-27T12:57:00+07:00</updated><id>https://wittawasw.com/2024/09/27/set-datetime-in-ubuntu</id><content type="html" xml:base="https://wittawasw.com/2024/09/27/set-datetime-in-ubuntu.html"><![CDATA[<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ดูเวลาปัจจุบันที่ตั้งไว้</span>
timedatectl
<span class="c">#                Local time: Fri 2024-09-27 12:13:31 +07</span>
<span class="c">#            Universal time: Fri 2024-09-27 05:13:31 UTC</span>
<span class="c">#                  RTC time: Fri 2024-09-27 05:13:31</span>
<span class="c">#                 Time zone: Asia/Bangkok (+07, +0700)</span>
<span class="c"># System clock synchronized: yes</span>
<span class="c">#               NTP service: active</span>
<span class="c">#           RTC in local TZ: no</span>

<span class="c"># ตั้งให้ sync อัตโนมัติผ่าน internet</span>
timedatectl set-ntp <span class="nb">yes
</span>timedatectl set-ntp no

<span class="c"># date - YYYY-MM-DD</span>
timedatectl set-time 2024-03-31
<span class="c"># time - HH:MM:SS</span>
timedatectl set-time 12:11:12

<span class="c"># การตั้ง timezone</span>
timedatectl list-timezones
timedatectl set-timezone <span class="s2">"&lt;ชื่อ timezone ที่ได้มา&gt;"</span>
timedatectl set-timezone UTC
</code></pre></div></div>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="unix" /><category term="cli" /><category term="ubuntu" /><category term="timedatectl" /><summary type="html"><![CDATA[```sh ดูเวลาปัจจุบันที่ตั้งไว้ timedatectl Local time: Fri 2024-09-27 12:13:31 +07 Universal time: Fri 2024-09-27 05:13:31 UTC RTC time: Fri 2024-09-27 05:13:31 Time zone: Asia/Bangkok (+07, +0700) System clock synchronized: yes NTP service: active RTC in local TZ: no]]></summary></entry><entry><title type="html">การตั้งค่า .gitignore สำหรับทุก git directory ในเครื่อง</title><link href="https://wittawasw.com/2024/09/27/setup-global-gitignore.html" rel="alternate" type="text/html" title="การตั้งค่า .gitignore สำหรับทุก git directory ในเครื่อง" /><published>2024-09-27T12:57:00+07:00</published><updated>2024-09-27T12:57:00+07:00</updated><id>https://wittawasw.com/2024/09/27/setup-global-gitignore</id><content type="html" xml:base="https://wittawasw.com/2024/09/27/setup-global-gitignore.html"><![CDATA[<p>บันทึกไว้ว่าในเครื่องมี <code class="language-plaintext highlighter-rouge">gitignore</code> อะไรบ้าง</p>

<h2 id="คำสั่งที่ใช้">คำสั่งที่ใช้</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># สั่งให้ใช้ไฟล์ ~/.gitignore เป็น reference</span>
git config <span class="nt">--global</span> core.excludesFile <span class="s1">'~/.gitignore'</span>
</code></pre></div></div>

<h2 id="ไฟล์-gitignore">ไฟล์ <code class="language-plaintext highlighter-rouge">.gitignore</code></h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Environment Variables</span>
.env
.rbenv-vars

<span class="c"># Python</span>
__pycache__

<span class="c"># Node</span>
node_modules
npm-debug.log

<span class="c"># Dart, FLutter</span>
<span class="k">**</span>/doc/api/
<span class="k">**</span>/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

<span class="c"># Editor</span>
<span class="k">*</span>.iml
<span class="k">*</span>.ipr
<span class="k">*</span>.iws
.idea/

<span class="c"># scratchpad เอาไว้ note สิ่งที่ต้องทำ, สิ่งที่กำลังทำ , ฯลฯ</span>
todo
todo.txt

<span class="c"># Mac</span>
.DS_Store

<span class="c"># Windows</span>
Thumbs.db

</code></pre></div></div>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="devtool" /><category term="git" /><summary type="html"><![CDATA[บันทึกไว้ว่าในเครื่องมี gitignore อะไรบ้าง]]></summary></entry><entry><title type="html">ลองเทียบ performance ของการใช้ฟังก์ชัน COALESCE กับ IS NULL ใน SQL</title><link href="https://wittawasw.com/2024/09/08/sql-between-performance.html" rel="alternate" type="text/html" title="ลองเทียบ performance ของการใช้ฟังก์ชัน COALESCE กับ IS NULL ใน SQL" /><published>2024-09-08T16:24:00+07:00</published><updated>2024-09-08T16:24:00+07:00</updated><id>https://wittawasw.com/2024/09/08/sql-between-performance</id><content type="html" xml:base="https://wittawasw.com/2024/09/08/sql-between-performance.html"><![CDATA[<p>วันก่อนเห็นน้องในทีมส่งข้อความหากันเองในกลุ่มที่ทำงานเป็น query ด้วย <code class="language-plaintext highlighter-rouge">Gorm</code> หน้าตาประมาณ</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">Where</span><span class="p">(</span><span class="s">"? BETWEEN c.effective_at AND COALESCE(c.expire_at,  ?)"</span><span class="p">,</span> <span class="n">effected_time</span><span class="p">,</span> <span class="n">effected_time</span><span class="o">.</span><span class="n">AddDate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>
</code></pre></div></div>

<p>พอเห็นแล้วอดไม่ได้ที่จะแนะนำว่าเช็คถ้า <code class="language-plaintext highlighter-rouge">IS NULL</code> ก่อนก็สามารถทำได้เหมือนกัน ถ้าอยากได้ query ที่รองรับ
เผื่อกรณีที่ <code class="language-plaintext highlighter-rouge">expire_at</code> สามารถเป็น <code class="language-plaintext highlighter-rouge">NULL</code> ได้แบบนี้</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">Where</span><span class="p">(</span><span class="s">"c.effective_at &lt;= ? AND (c.expire_at IS NULL OR c.expire_at &gt; ?)"</span><span class="p">,</span> <span class="n">effected_time</span><span class="p">,</span> <span class="n">effected_time</span><span class="p">)</span>
</code></pre></div></div>

<p>เพราะในหัวตอนนั้น เข้าใจว่าการใช้ ฟังก์ชันแบบ <code class="language-plaintext highlighter-rouge">COALESCE</code> น่าจะได้ performance
ที่แย่กว่าเพราะถือเป็นค่าใหม่ ที่ไม่ได้ถูกทำ index เอาไว้</p>

<p>ก็เลยได้ลองเขียน script เก็บไว้ดูเลยว่ามันจะดีกว่าขนาดไหน แต่เท่าที่ดูจากผลลัพธ์ก็ได้ค่าเฉลี่ยที่ไม่ต่างกันเท่าไหร่ ซึ่งอาจจะเพราะ scale ยังเป็นแค่ db ขนาดเล็กด้วย โดยเทียบผลลัพธ์ทั้งแบบที่มี index และไม่มี index บน SQLite3</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># no index</span>
Query 1 - BETWEEN: 68.308µs, IS NULL/OR: 36.579µs
Query 2 - BETWEEN: 25.68µs, IS NULL/OR: 22.227µs
Query 3 - BETWEEN: 26.301µs, IS NULL/OR: 23.961µs
Query 4 - BETWEEN: 25.267µs, IS NULL/OR: 23.52µs

-&gt; BETWEEN Query - Avg: 24.118µs, Max: 68.308µs, Min: 22.626µs
-&gt; IS NULL/OR Query - Avg: 21.933µs, Max: 28.717µs, Min: 20.758µs
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#  index expire_at</span>
Query 1 - BETWEEN: 35.829µs, IS NULL/OR: 34.539µs
Query 2 - BETWEEN: 20.68µs, IS NULL/OR: 20.437µs
Query 3 - BETWEEN: 16.351µs, IS NULL/OR: 17.691µs
Query 4 - BETWEEN: 15.277µs, IS NULL/OR: 16.92µs
<span class="nb">.</span>
<span class="nb">.</span>
Query 57 - BETWEEN: 14.785µs, IS NULL/OR: 16.027µs
Query 58 - BETWEEN: 14.753µs, IS NULL/OR: 17.613µs
Query 59 - BETWEEN: 14.972µs, IS NULL/OR: 16.867µs
Query 60 - BETWEEN: 15.153µs, IS NULL/OR: 16.241µs
Query 61 - BETWEEN: 14.869µs, IS NULL/OR: 16.411µs
Query 62 - BETWEEN: 14.944µs, IS NULL/OR: 16.131µs
Query 63 - BETWEEN: 14.735µs, IS NULL/OR: 16.196µs
Query 64 - BETWEEN: 15.084µs, IS NULL/OR: 17.143µs
Query 65 - BETWEEN: 15.457µs, IS NULL/OR: 16.688µs
<span class="nb">.</span>
<span class="nb">.</span>
Query 80 - BETWEEN: 25.236µs, IS NULL/OR: 22.812µs
Query 81 - BETWEEN: 24.781µs, IS NULL/OR: 22.533µs
Query 82 - BETWEEN: 24.459µs, IS NULL/OR: 22.659µs
Query 83 - BETWEEN: 24.48µs, IS NULL/OR: 24.181µs
Query 84 - BETWEEN: 24.922µs, IS NULL/OR: 23.309µs
Query 85 - BETWEEN: 24.829µs, IS NULL/OR: 22.028µs
Query 86 - BETWEEN: 24.633µs, IS NULL/OR: 22.383µs

-&gt; BETWEEN Query - Avg: 20.556µs, Max: 130.997µs, Min: 14.37µs
-&gt; IS NULL/OR Query - Avg: 19.853µs, Max: 34.539µs, Min: 13.835µs

</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#  index effective_at, expire_at</span>
Query 1 - BETWEEN: 64.32µs, IS NULL/OR: 26.332µs
Query 2 - BETWEEN: 31.684µs, IS NULL/OR: 21.047µs
Query 3 - BETWEEN: 27.349µs, IS NULL/OR: 18.24µs
<span class="nb">.</span>
Query 90 - BETWEEN: 14.501µs, IS NULL/OR: 13.311µs
Query 91 - BETWEEN: 14.412µs, IS NULL/OR: 14.461µs
Query 92 - BETWEEN: 14.897µs, IS NULL/OR: 14.527µs
Query 93 - BETWEEN: 14.834µs, IS NULL/OR: 13.487µs
Query 94 - BETWEEN: 14.44µs, IS NULL/OR: 13.501µs
Query 95 - BETWEEN: 14.643µs, IS NULL/OR: 13.488µs
Query 96 - BETWEEN: 14.544µs, IS NULL/OR: 13.745µs
Query 97 - BETWEEN: 14.559µs, IS NULL/OR: 13.499µs
Query 98 - BETWEEN: 14.548µs, IS NULL/OR: 13.602µs
Query 99 - BETWEEN: 14.576µs, IS NULL/OR: 13.42µs
Query 100 - BETWEEN: 14.421µs, IS NULL/OR: 14.638µs

-&gt; BETWEEN Query - Avg: 22.53µs, Max: 64.32µs, Min: 14.355µs
-&gt; IS NULL/OR Query - Avg: 17.132µs, Max: 26.332µs, Min: 13.311µs
</code></pre></div></div>

<blockquote>
  <p>script ถูกแชร์ไว้ที่ <a href="https://github.com/wittawasw/wittawasw.github.io/blob/main/code/go/sqlperf/main.go">github</a></p>
</blockquote>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="sql" /><summary type="html"><![CDATA[วันก่อนเห็นน้องในทีมส่งข้อความหากันเองในกลุ่มที่ทำงานเป็น query ด้วย Gorm หน้าตาประมาณ]]></summary></entry><entry><title type="html">Ruby 3.3.5 เตือนให้เอา standard lib ออก</title><link href="https://wittawasw.com/2024/09/04/ruby-3-5-deprecation-warnings.html" rel="alternate" type="text/html" title="Ruby 3.3.5 เตือนให้เอา standard lib ออก" /><published>2024-09-04T21:34:00+07:00</published><updated>2024-09-04T21:34:00+07:00</updated><id>https://wittawasw.com/2024/09/04/ruby-3-5-deprecation-warnings</id><content type="html" xml:base="https://wittawasw.com/2024/09/04/ruby-3-5-deprecation-warnings.html"><![CDATA[<p>ไม่รู้ว่าเตือนตั้งแต่ 3.3.อะไร เพราะจาก 3.3.0 ก็มา 3.3.5 เลย เจอตอนกำลังจะเขียน
blog ก็เลยได้อีก blog ว่าตอนนี้ Ruby core กำลังเดินตาม Roadmap ที่อยากให้
Runtime โดย default มี memory footprint ที่เล็กลง โดยเท่าที่รู้ก็ถอดออกไปตามนี้</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ruby 3.5 deprecation warnings</span>
<span class="n">gem</span> <span class="s2">"logger"</span>
<span class="n">gem</span> <span class="s2">"base64"</span>
<span class="n">gem</span> <span class="s2">"csv"</span>
<span class="n">gem</span> <span class="s2">"ostruct"</span>
</code></pre></div></div>

<p>ก็ไม่ใช่เรื่องแย่ แต่ก็น่าเสียดายที่คำสั่งใน <code class="language-plaintext highlighter-rouge">base64</code> เป็น 1 ใน คำสั่งแสนสะดวก
ที่ผมเอาไว้ใช้ได้ตลอดต้องมาโดนถอดออก แต่ <code class="language-plaintext highlighter-rouge">ostruct</code> ไม่น่าเสียดายเลยเพราะเอาจริงๆ
มันถูกมองว่าไม่ควรใช้มานานแล้ว</p>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="ruby" /><category term="deprecation" /><summary type="html"><![CDATA[ไม่รู้ว่าเตือนตั้งแต่ 3.3.อะไร เพราะจาก 3.3.0 ก็มา 3.3.5 เลย เจอตอนกำลังจะเขียน blog ก็เลยได้อีก blog ว่าตอนนี้ Ruby core กำลังเดินตาม Roadmap ที่อยากให้ Runtime โดย default มี memory footprint ที่เล็กลง]]></summary></entry><entry><title type="html">การใช้ kubectl แบบ “ตัวย่อ”</title><link href="https://wittawasw.com/2024/08/05/k-exec-abbr.html" rel="alternate" type="text/html" title="การใช้ kubectl แบบ “ตัวย่อ”" /><published>2024-08-05T21:52:00+07:00</published><updated>2024-08-05T21:52:00+07:00</updated><id>https://wittawasw.com/2024/08/05/k-exec-abbr</id><content type="html" xml:base="https://wittawasw.com/2024/08/05/k-exec-abbr.html"><![CDATA[<p>เนื้อหานี้เป็นส่วนหนึ่งของที่ผมใช้ทำงานจริง แล้วก็ได้เอาไปแจกเป็นโพยให้ที่ทำงานเดิมมาแล้ว
เอา copy มาลง blog ส่วนตัวเพื่อเก็บไว้เป็นความทรงจำ</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>ความเข้าใจเบื้องต้นเกี่ยวกับ kubectl, k8s</li>
  <li>install kubectl ไว้ในเครื่อง</li>
  <li>install
    <ul>
      <li><a href="https://github.com/ahmetb/kubectl-aliases">kubectl-aliases</a></li>
      <li><a href="https://github.com/ahmetb/kubectx">kubectx</a> (kubens จะถูก install มาด้วยกัน)</li>
    </ul>
  </li>
</ul>

<h2 id="ข้อดีของการใช้ตัวย่อแบบนี้">ข้อดีของการใช้ตัวย่อแบบนี้</h2>
<p>ในการใช้งาน kubectl แบบปกติ คำสั่งจะค่อนข้างยาว เช่น</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; kubectl get pod <span class="nt">--context</span><span class="o">=</span>dev <span class="nt">--namespace</span><span class="o">=</span>authen
</code></pre></div></div>

<h1 id="หรือ">หรือ</h1>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; kubectl config use-context dev
-&gt; kubectl get pod <span class="nt">--namespace</span><span class="o">=</span>authen
</code></pre></div></div>

<p>ซึ่งยาว… ยิ่งคิดว่าอันนี้เป็นคำสั่งที่สั้นที่สุดแล้วยังรู้สึกไม่อยากพิมพ์ ถ้าแบบที่ซับซ้อนกว่านี้ ยิ่งไม่อยากพิมพ์
โดยจากข้างบน ถ้าเราลงเครื่องตามข้างบนจะเหลือแบบนี้</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ทำการ set context, namespace แค่ครั้งเดียว</span>
-&gt; k ctx dev
-&gt; k ns authen

<span class="c"># จากนั้นใช้คำสั่งต่อเนื่องได้เลย ไม่ต้องพิมพ์ namespace อีก</span>
-&gt; kgpo
</code></pre></div></div>

<p>สั้นกว่ากันเยอะ…  เวลาที่ใช้พิมพ์ลดลงได้หลายวินาที
โดยรายละเอียดทั้งหมดสามารถดูคำสั่งได้จาก source ใน <a href="https://github.com/ahmetb/kubectl-aliases/blob/master/.kubectl_aliases">github</a></p>

<h2 id="ข้อเสีย">ข้อเสีย</h2>
<p>จำคำสั่งจริงไม่ได้</p>

<h2 id="use-case-ใช้งานจริง-โดยเอาไปต่อยอดด้วย-shell-script">Use case ใช้งานจริง โดยเอาไปต่อยอดด้วย shell script</h2>

<p>การค้นหา pod
หลายๆครั้ง เราอยาก ดูสถานะหรือดูจำนวน pod หรืออาจจะแค่อยากดูชื่อเต็มของ pod เราสามารถ get pod ออกมาทั้งหมด แล้ว grep</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ดู pod ทั้งหมด</span>
-&gt; kgpo
<span class="c"># NAME                                         READY   STATUS    RESTARTS        AGE</span>
<span class="c"># auth-service-api-657b4c4658-cs76p            1/1     Running   0               77m</span>
<span class="c"># core-service-5498d9f57c-2tll1                1/1     Running   0               20d</span>
<span class="c"># core-service-5498d9f57c-2tll2                1/1     Pending   0</span>
<span class="c"># report-service-8745c86f5-w24dd               1/1     Running   0               13h</span>
<span class="c"># shared-service-6f88d74cdc-thpfw              1/1     Running   3 (4h12m ago)   12h</span>

<span class="c"># ดู pod ทั้งหมด ที่มีคำว่า core</span>
-&gt; kgpo | <span class="nb">grep </span>core
<span class="c"># core-service-5498d9f57c-2tll1                1/1     Running   0               20d</span>
<span class="c"># core-service-5498d9f57c-2tll2                1/1     Pending   0</span>

<span class="c"># ดู pod ทั้งหมด ที่มีคำว่า core และไม่มีคำว่า Running</span>
<span class="c"># เอาไว้หา pod ที่ผิดปกติ</span>
-&gt; kgpo | <span class="nb">grep </span>core | <span class="nb">grep</span> <span class="nt">-v</span> Running
<span class="c"># core-service-5498d9f57c-2tll2                1/1     Pending   0</span>
</code></pre></div></div>

<p>ถ้าอยากได้แค่ชื่ออย่างเดียว ก็ต่อยอดด้วยคำสั่ง awk แล้วทำเป็นฟังก์ชันไปใส่ใน shell</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>ks<span class="o">()</span> <span class="o">{</span>
  kgpo | <span class="nb">awk</span> <span class="s1">'NR&gt;1 {print $1}'</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> POD_NAME<span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span>
  <span class="k">done</span>
<span class="o">}</span>

-&gt; ks core
<span class="c"># core-service-5498d9f57c-2tll1</span>
<span class="c"># core-service-5498d9f57c-2tll2</span>
</code></pre></div></div>

<p>ต่อยอดจากการค้นหา pod โดยสั่งให้ ลบ pod ที่เราหาชื่อเจอออก
การสั่งลบ Pod ตามชื่อนั้นๆ เพื่อให้ Deployment ทำการสร้าง Pod ใหม่มาแทนที่ เพราะฉะนั้นก็เท่ากับเป็นการ restart application process แบบเร็วไปในตัว</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>krrm<span class="o">()</span> <span class="o">{</span>
  kgpo | <span class="nb">awk</span> <span class="s1">'NR&gt;1 {print $1}'</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> POD_NAME<span class="p">;</span> <span class="k">do</span>
    <span class="c"># คำสั่ง krm ย่อมาจาก kubectl delete</span>
    krm pod <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"pod </span><span class="nv">$POD_NAME</span><span class="s2"> restarted."</span>
  <span class="k">done</span>
<span class="o">}</span>

<span class="c"># ตัวอย่างการใช้</span>
-&gt; krrm core
<span class="c"># pod core-service-5498d9f57c-2tll1 deleted</span>
<span class="c"># pod core-service-5498d9f57c-2tll1 restarted.</span>
<span class="c"># pod core-service-5498d9f57c-2tll2 deleted</span>
<span class="c"># pod core-service-5498d9f57c-2tll2 restarted.</span>
</code></pre></div></div>

<h2 id="การ-exec-จากข้างใน-pod">การ exec จากข้างใน pod</h2>
<p>ในกรณีที่เราต้องการ exec เข้าไปรันคำสั่งบางอย่างข้างใน pod สามารถใช้ฟังก์ชั่น</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ke โดย default จะสั่ง /bin/sh เพื่อเข้าไปข้างใน แต่สามารถใส่คำสั่งอื่นต่อท้าย</span>
<span class="c"># เพื่อ override ได้</span>
<span class="k">function </span>ke<span class="o">()</span> <span class="o">{</span>
  <span class="nv">POD_NAME</span><span class="o">=</span><span class="si">$(</span>kgpo | <span class="nb">awk</span> <span class="s1">'NR&gt;1 {print $1}'</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span>

  <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>k <span class="nb">exec</span> <span class="nt">-it</span> <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span> <span class="nt">--</span> /bin/sh
  <span class="k">else
    </span><span class="nb">shift
    </span>k <span class="nb">exec</span> <span class="nt">-it</span> <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># ตัวอย่างการใช้เพื่อ exec เข้าไปใน pod</span>
<span class="c"># ถ้าอยากเข้าให้ตรง pod แบบเจาะจงก็เอาชื่อเต็มๆมาใส่</span>
-&gt; ke core-service-5498d9f57c-2tll1
<span class="c"># /root/app/ |</span>

<span class="c"># ถ้าแค่อยากเข้าอันไหนก็ได้เพราะมันควรจะเหมือนกันทุกอันก็พิมพ์ชื่อแค่ส่วนเดียวได้</span>
-&gt; ke core
<span class="c"># /root/app/ |</span>
</code></pre></div></div>

<p>ตัวอย่าง use case จริง ของการ exec จากข้างใน pod
ถ้าเราต้องการตรวจสอบว่า Environment Variables ที่เรา deploy ที่ pod มีค่าถูกต้องหรือไม่ สามารถใช้คำสั่ง ke ข้างบนแบบนี้</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># เรียกดู env vars ทั้งหมดใน pod</span>
-&gt; ke core <span class="nb">env</span>

<span class="c"># เรียกดู env vars ใน pod ที่นำหน้าว่า DB_</span>
-&gt; ke core <span class="nb">env</span> | <span class="nb">grep </span>DB_
</code></pre></div></div>

<p>ในการทำงานจริงมักจะใช้คู่กับการ restart pod ข้างบน โดย</p>

<ul>
  <li>ตรวจดูว่า env ใน pod แล้วพบว่าผิด หรือยังไม่มี env</li>
  <li>deploy Env ใหม่ ผ่าน gitops</li>
  <li>ลบ pod เพื่อ restart deployment</li>
  <li>ตรวจดูว่า env ใหม่ ได้ถูก deploy ถูกต้องแล้วหรือไม่</li>
</ul>

<h2 id="การดู-log-ของ-pod">การดู log ของ pod</h2>
<p>วิธีประยุกต์ใช้ script คล้ายกับการ exec แต่ลองเขียนใหม่สำหรับดู log</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>kl<span class="o">()</span> <span class="o">{</span>
  <span class="nv">POD_NAME</span><span class="o">=</span><span class="si">$(</span>kgpo | <span class="nb">awk</span> <span class="s1">'NR&gt;1 {print $1}'</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span>

  <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"-f"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span>k logs <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span>
  <span class="k">else
    </span>k logs <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span>
  <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># ตัวอย่างการใช้</span>
<span class="c"># เจาะจงชื่อ</span>
-&gt; kl core-service-5498d9f57c-2tll1
<span class="c"># เอาแค่อันแรก</span>
-&gt; kl core

<span class="c"># ใส่ -f เพื่อสั่งให้ process รอรับ log แบบ live</span>
-&gt; kl core-service-5498d9f57c-2tll1 <span class="nt">-f</span>
</code></pre></div></div>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="kubernetes" /><category term="cli" /><summary type="html"><![CDATA[เนื้อหานี้เป็นส่วนหนึ่งของที่ผมใช้ทำงานจริง แล้วก็ได้เอาไปแจกเป็นโพยให้ที่ทำงานเดิมมาแล้ว เอา copy มาลง blog ส่วนตัวเพื่อเก็บไว้เป็นความทรงจำ]]></summary></entry><entry><title type="html">ลองพยายามอธิบาย Active Record และ Active Record Migration</title><link href="https://wittawasw.com/2024/06/02/activerecord-and-activerecord-migration.html" rel="alternate" type="text/html" title="ลองพยายามอธิบาย Active Record และ Active Record Migration" /><published>2024-06-02T14:28:00+07:00</published><updated>2024-06-02T14:28:00+07:00</updated><id>https://wittawasw.com/2024/06/02/activerecord-and-activerecord-migration</id><content type="html" xml:base="https://wittawasw.com/2024/06/02/activerecord-and-activerecord-migration.html"><![CDATA[<p>บทความนี้ได้แรงผลักดันมาจากการที่โดนถามมาเรื่องการทำ Database Migration ของ Rails
ซึ่งส่วนตัวคิดว่าบทความในอินเตอร์เนตเท่าที่หาดู ไม่มีอันไหนช่วยให้เข้าใจได้ดีกว่า
<a href="https://guides.rubyonrails.org/active_record_migrations.html">Official Doc</a> ของ Rails เลย
แต่เราก็เชื่อว่าคนถามน่าจะลองอ่านแล้วล่ะ แต่แค่อาจจะยังไม่ตกผลึกออกมาเป็นแนวปฏิบัติไม่ได้
ก็เลยคิดว่าจะลองพยายามเขียนอะไรซักอย่างขึ้นมาอุดช่องว่าง
สำหรับคนที่พอเข้าใจการทำงานของฐานข้อมูลอยู่แล้ว แต่แค่ไม่ได้ทำงานด้วย Ruby on Rails มาก่อน
ให้สามารถเห็นภาพการทำงานที่ชัดขึ้น</p>

<h2 id="active-record">Active Record</h2>

<p>Model ใน MVC ของ Ruby on Rails นั้นใช้ library ORM เฉพาะของตัวเองที่ชื่อว่า <code class="language-plaintext highlighter-rouge">Active Record</code>
โดยชื่อของ library ก็ได้รับอิทธิพลโดยตรงมาจากแนวคิด
<a href="https://en.wikipedia.org/wiki/Active_record_pattern"><code class="language-plaintext highlighter-rouge">Active record pattern</code></a>
ซึ่งแนวคิดหลักของ pattern นี้ คือ</p>

<ul>
  <li>
    <p>การเข้าถึง table แต่ล่ะ table จะถูก encapsulate อยู่ภายใน class โดยที่แต่ล่ะ instance ของ class ก็คือตัวแทนของ row หรือ record ของข้อมูลใน table และมีวิธีเข้าถึงข้อมูลแต่ล่ะ column ตามชื่อของ column นั้นโดยตรง</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user</span><span class="p">.</span><span class="nf">class</span><span class="p">.</span><span class="nf">name</span>
<span class="c1"># =&gt; "User"</span>
<span class="n">user</span><span class="p">.</span><span class="nf">firstname</span>
<span class="c1"># =&gt; "John"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>เมื่อ instance ของ class ได้รับการ initiate ขึ้นมาใหม่และถูก save …จะเท่ากับการ insert
record ใหม่</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">firstname: </span><span class="s2">"John"</span><span class="p">)</span>
<span class="n">user</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># =&gt; INSERT INTO "users" (firstname) VALUES ("John", "2024-06-02 12:34:56", "2024-06-02 12:34:56") RETURNING "id"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>เมื่อ instance ของ class ได้รับการ load จากข้อมูลที่อยู่เดิมและถูก save …จะเท่ากับการ
update record ใหม่</p>

    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">firstname: </span><span class="s2">"John"</span><span class="p">).</span><span class="nf">first</span>
<span class="n">user</span><span class="p">.</span><span class="nf">firstname</span> <span class="o">=</span> <span class="s2">"Jack"</span>
<span class="n">user</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># =&gt; UPDATE "users" SET "firstname" = ?, "updated_at" = ? WHERE "users"."id" = ?  [["firstname", "Jack"], ["updated_at", "2024-06-02 11:34:54.562867"], ["id", 1]]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>ชื่อของ table กับชื่อของ class จะตั้งตามหลัก
<a href="https://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a>
ซึ่งสรุปสั้นๆเร็วๆตรงนี้ได้ตามตัวอย่างนี้</p>

    <ul>
      <li>ชื่อ class = ชื่อ entity ของสิ่งที่เราต้องการใช้ในรูปเอกพจน์</li>
      <li>ชื่อ table = ชื่อ entity ของสิ่งที่เราต้องการใช้ในรูปพหูพจน์</li>
    </ul>

    <p><br /></p>

    <blockquote>
      <p>Ex: entity ของ user จะใช้ชื่อ class ว่า User ภายในไฟล์ชื่อ user.rb และอยู่ใน table ที่ชื่อ users</p>
    </blockquote>
  </li>
</ul>

<h2 id="active-record-migration">Active Record Migration</h2>

<p>เป็นเครื่องมือที่ทำมาเพื่อ support การทำงานของ Active Record
เพื่อให้นักพัฒนาสามารถทำงานไปพร้อมๆกันได้ โดยที่สามารถตรวจสอบการเปลี่ยนแปลงของ
Database Schema ได้ตลอด</p>

<blockquote>
  <p>คำว่า Database Schema ในที่นี้หมายถึง spec ของฐานข้อมูลนั้นๆ เช่น ชื่อ table รวมถึงชื่อ  column ภายใน, Primary Key, Foreign Key, Index ต่างๆ รวมถึง trigger หรือ store procedure ด้วย</p>
</blockquote>

<h3 id="อธิบายตามโครงสร้างไฟล์">อธิบายตามโครงสร้างไฟล์</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- config/
  - database.yml
    <span class="c"># ใช้ประกาศค่าต่างๆที่ใช้ในการเชื่อมต่อกับฐานข้อมูล เช่น host, port หรือ</span>
    <span class="c"># connection string</span>
- db/
  - migrate
    <span class="c"># directory ที่ใช้เก็บไฟล์ migration</span>
    <span class="c"># ใช้งานผ่านคำสั่ง rails db:migrate, rails db:rollback</span>
    - ....
  - schema.rb
    <span class="c"># ไฟล์ที่เก็บ schema ปัจจุบันของแอปพลิเคชัน</span>
    <span class="c"># ใช้งานผ่านคำสั่ง rails db:schema:load, rails db:schema:dump</span>
  - seeds.rb
    <span class="c"># ไฟล์ที่ใช้เก็บคำสั่งสำหรับสร้างข้อมูลเบื้องต้นที่จำเป็นในแอปพลิเคชัน</span>
    <span class="c"># ใช้งานผ่านคำสั่ง rails db:seed</span>
</code></pre></div></div>

<h2 id="การใช้งานในการทำงานจริงๆเป็นยังไง-">การใช้งานในการทำงานจริงๆเป็นยังไง ?</h2>

<p>จากที่เกริ่นมาทั้งหมดข้างบน คิดว่าหลายคนสามารถอ่านจนเข้าใจได้ไม่มีปัญหา แต่ถ้าจะมีปัญหาก็คือ
แนวทางปฏิบัติตอนที่ทำงานจริง ว่าเป็นยังไงกันแน่ ทำไมลองทำเองดูแล้วมันก็ยังงงๆ
ไม่แน่ใจว่าจะใช่แบบที่ทำรึเปล่า ซึ่งจากประสบการณ์แล้ว ก็ไม่แปลกที่จะงงกันตรงนี้
เพราะคนที่ชอบใช้ Rails แต่ไม่เข้าใจการทำ migration มีอยู่จำนวนไม่น้อยเลย</p>

<blockquote>
  <p>มีทั้งแบบที่แค่หยุดทำไฟล์ migration กับอีกแบบคือหนีไปใช้ NoSQL แบบ MongoDB แทน</p>
</blockquote>

<h3 id="แบบฝึกให้ทำหรือคิดตาม-แอปพลิเคชันซื้อขายสินค้า">แบบฝึกให้ทำหรือคิดตาม: แอปพลิเคชันซื้อขายสินค้า</h3>

<p>สมมติว่า เรากำลังทำแอปพลิเคชันที่สามารถวางขายสินค้าและเปิดให้ผู้ซื้อสามารถสั่งซื้อ
ครั้งละหลายรายการได้ โดยมี entity ที่เราจะใช้ตามนี้</p>

<ul>
  <li>Buyer ผู้ซื้อสินค้า</li>
  <li>Product สินค้า</li>
  <li>Order รายการสั่งซื้อสินค้า</li>
</ul>

<blockquote>
  <p>ต่อจากนี้ไป ทุกครั้งหลังการสร้าง model, migration ให้รันคำสั่ง
<code class="language-plaintext highlighter-rouge">rails db:migrate</code></p>
</blockquote>

<h3 id="ออกแบบ-class-ที่จะใช้-ตามลำดับโปรแกรมที่เขียน">ออกแบบ class ที่จะใช้ ตามลำดับโปรแกรมที่เขียน</h3>

<blockquote>
  <p>สมมติว่าเราเริ่มจากการมีสินค้าในระบบก่อน</p>
</blockquote>

<p>สร้าง model ของ <code class="language-plaintext highlighter-rouge">Product</code> โดยการ generate model
จะเป็นการสร้างไฟล์ model และ migration ขึ้นมา</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate model product name:string description:text price:integer
</code></pre></div></div>

<p>ก่อนจะไปต่อกันสามารถลองสร้างไฟล์ migration เพื่อเพิ่ม column ง่ายๆได้ เช่น การให้ <code class="language-plaintext highlighter-rouge">Product</code>
สามารถเก็บจำนวน stock ได้</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate migration add_stock_to_products stock:integer
</code></pre></div></div>

<blockquote>
  <p>จะเห็นได้ว่าเราไม่ได้ระบุชื่อ table เป็น parameter
โดยตรงแต่คำสั่งนี้ก็ยังทำงานตามที่เราต้องการได้ เพราะรูปแบบคำสั่งก็ generate
จากชื่อไฟล์ตามแนวคิด Convention over configuration
(จะ generate ไฟล์เปล่าแล้วเขียนเองก็ได้)</p>
</blockquote>

<p>มีสินค้าแล้วเราก็อยากให้การสั่งซื้อสินค้าแต่ล่ะครั้งของ <code class="language-plaintext highlighter-rouge">Buyer</code> ถูกเก็บไว้ใน <code class="language-plaintext highlighter-rouge">Order</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate model buyer email:string
rails generate model order buyer:references
</code></pre></div></div>

<p>references คือการสร้าง foreign key พร้อมกับ index ไปที่ resource นั้น
ซึ่ง <code class="language-plaintext highlighter-rouge">buyer:references</code> ในที่นี้ จะทำให้ table <code class="language-plaintext highlighter-rouge">orders</code>
มี column <code class="language-plaintext highlighter-rouge">buyer_id</code> เพิ่มเข้าไปพร้อมกับสร้าง index ให้ โดยไฟล์ <code class="language-plaintext highlighter-rouge">order.rb</code>
ที่ถูกสร้างขึ้นทีหลังจะมีความสัมพันธ์ระบุ <code class="language-plaintext highlighter-rouge">belongs_to :buyer</code> ระบุให้เลย
แต่ในไฟล์ <code class="language-plaintext highlighter-rouge">buyer.rb</code> เราต้องเข้าไปใส่ ความสัมพันธ์เองตามข้างล่าง</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Buyer</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:orders</span>
<span class="k">end</span>
</code></pre></div></div>

<p>พอมาถึงตรงนี้ เราอยากจะให้ความสัมพันธ์ของ <code class="language-plaintext highlighter-rouge">Order</code> กับ <code class="language-plaintext highlighter-rouge">Product</code> เป็นแบบ many-to-many
ซึ่งจากประสบการณ์ของผมค้นพบว่าส่วนมากจะหมดใจกันแถวๆนี้แหละ ที่ไม่รู้จะไปไงต่อดี 😅
จะไปต่อกับไฟล์ migration ก็งงๆ จะข้ามส่วนนี้ไปเลยก็เท่ากับว่าไฟล์ก็มีขั้นตอนไม่ครบแล้ว
ฝืนทำต่อไปก็ไม่สมบูรณ์อยู่ดี</p>

<p>แต่เราลองทำต่อตรงนี้ซักหน่อย เพราะ Active Record Migration
มีวิธีใช้งานที่ผมเองเชื่อว่าครอบคลุม 99% ของการใช้งานทั้งหมดแล้ว
กรณีแบบนี้ก็เช่นกัน</p>

<h3 id="สร้างไฟล์-migration-สำหรับ-join-table">สร้างไฟล์ migration สำหรับ Join Table</h3>

<p>เราสามารถสร้างความสัมพันธ์แบบ many-to-many ได้ ด้วยการสร้าง <code class="language-plaintext highlighter-rouge">join table</code>
ซึ่งใช้คำสั่งสร้างแบบนี้</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails generate migration CreateJoinTableOrdersProducts order product
</code></pre></div></div>

<p>หลังการรัน <code class="language-plaintext highlighter-rouge">rails db:migrate</code> ในครั้งนี้ เนื่องจากเราไม่ได้ generate model ขึ้นใหม่ เราจึงจำเป็นต้อง  ประกาศความสัมพันธ์เองภายในไฟล์ model ของ <code class="language-plaintext highlighter-rouge">Product</code>, <code class="language-plaintext highlighter-rouge">Order</code></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_and_belongs_to_many</span> <span class="ss">:orders</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:buyer</span>
  <span class="n">has_and_belongs_to_many</span> <span class="ss">:products</span>
<span class="k">end</span>
</code></pre></div></div>

<p>มาถึงตรงนี้เราก็น่าจะสามารถลองเล่นกับความสัมพันธ์ใน <code class="language-plaintext highlighter-rouge">rails console</code> ดูได้แบบนี้</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="no">Buyer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s1">'buyer@test.com'</span><span class="p">)</span>
<span class="n">b</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># Insert Buyer b</span>

<span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="s1">'The Shirt'</span><span class="p">)</span>
<span class="nb">p</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># Insert Product p</span>

<span class="n">o</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
<span class="n">o</span><span class="p">.</span><span class="nf">products</span> <span class="o">&lt;&lt;</span> <span class="nb">p</span>
<span class="n">o</span><span class="p">.</span><span class="nf">buyer</span> <span class="o">=</span> <span class="n">b</span>
<span class="n">o</span><span class="p">.</span><span class="nf">save</span>
<span class="c1"># Insert Order o with Buyer b, Product p</span>
</code></pre></div></div>

<h3 id="สิ่งที่อยากให้สนใจหลังแบบฝึกข้างบน">สิ่งที่อยากให้สนใจหลังแบบฝึกข้างบน</h3>

<p>อยากให้ลองศึกษาไฟล์ migration ที่ถูกสร้างขึ้นมาเรียงตามลำดับแล้ว
อาจจะลองรันคำสั่ง <code class="language-plaintext highlighter-rouge">rails db:rollback</code> เปลี่ยนแปลงค่าบางอย่าง แล้วลอง <code class="language-plaintext highlighter-rouge">rails db:migrate</code>
อีกครั้งเพื่อดูผลลัพธ์ที่เกิดขึ้น โดยดูตัวอย่างทั้งหมดจาก
<a href="https://guides.rubyonrails.org/active_record_migrations.html">Official Doc</a></p>

<p>และศึกษาการเปลี่ยนแปลงของไฟล์ <code class="language-plaintext highlighter-rouge">db/schema.rb</code> ไปพร้อมๆกัน</p>

<h3 id="schemarb-คือ-single-source-of-truth-ของ-database-schema"><code class="language-plaintext highlighter-rouge">schema.rb</code> คือ Single Source of Truth ของ Database Schema</h3>

<p>หนึ่งในจุดที่ผมจะเข้าไปเปิดดูเป็นไฟล์แรกๆ หากได้รับมอบหมายให้ทำงานใน Ruby on Rails
แอปพลิเคชัน ก็คือไฟล์ <code class="language-plaintext highlighter-rouge">schema.rb</code> เพราะเป็นไฟล์ที่เราสามารถมองเห็น
ภาพรวมความซับซ้อนของระบบฐานข้อมูลภายในได้ภายในไฟล์เดียว</p>

<h3 id="ถ้าจำนวนไฟล์-migrations-เยอะขึ้นจนจัดการไม่ไหว">ถ้าจำนวนไฟล์ migrations เยอะขึ้นจนจัดการไม่ไหว</h3>

<p>หนึ่งในข้อกังวลอย่างหนึ่งของการเริ่มทำไฟล์ migration ที่ค่อนข้างมีเหตุผล แต่ Active Record
Migration ก็วางแนวทางไว้รับมือแล้ว โดยที่เราสามารถ…</p>

<p>ย้ายไฟล์ที่เก่ามากไปวางที่อื่นหรือลบทิ้งได้เลย แล้วใช้วิธีสร้างฐานข้อมูลเริ่มต้นด้วยคำสั่ง
<code class="language-plaintext highlighter-rouge">rails db:schema:load</code> ให้สร้างฐานข้อมูลตามข้อมูลใน <code class="language-plaintext highlighter-rouge">schema.rb</code> แทนการใช้คำสั่ง
<code class="language-plaintext highlighter-rouge">rails db:migrate</code> เพื่อรันคำสั่งทั้งหมดทีล่ะคำสั่ง</p>

<p>นอกจากการ load schema แล้วก็ยังมี <code class="language-plaintext highlighter-rouge">rails db:schema:dump</code> ที่เป็นคำสั่งตรงข้ามของการ load
โดยเป็นคำสั่งที่เอาข้อมูล schema ในฐานข้อมูลที่เชื่อมต่อลงเก็บที่ <code class="language-plaintext highlighter-rouge">schema.rb</code>
ซึ่งก็สะดวกสำหรับใช้ในการตรวจสอบว่า Database schema ตรงกับที่มีใน <code class="language-plaintext highlighter-rouge">schema.rb</code> หรือไม่
โดยถ้าไฟล์มีการเปลี่ยนแปลงหลังการรันคำสั่งก็สามารถบอกได้ว่าแตกต่างตรงไหนด้วย
Git Version Control</p>

<h3 id="การตรวจสอบสถานะของ-database-migration">การตรวจสอบสถานะของ database migration</h3>

<p>ใช้คำสั่ง <code class="language-plaintext highlighter-rouge">rails  db:migrate:status</code> เพื่อเรียกดูข้อมูลใน terminal
โดยจะเห็นแบบตัวอย่างข้างล่าง</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Status   Migration ID    Migration Name
<span class="nt">--------------------------------------------------</span>
   up     20240508063759  <span class="k">**********</span> NO FILE <span class="k">**********</span>
   up     20240602151931  Create products
   up     20240602154948  Create buyers
   up     20240602155002  Create orders
   up     20240602161438  Create <span class="nb">join </span>table orders products
  down    20240602161959  Add stock to products
</code></pre></div></div>

<h3 id="ข้อดีและข้อเสียของการทำ-migration-แบบนี้">ข้อดีและข้อเสียของการทำ Migration แบบนี้</h3>

<table>
  <thead>
    <tr>
      <th>ข้อดี</th>
      <th>ข้อเสีย</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>สามารถติดตามการเปลี่ยนแปลงได้ Git Version Control เพราะการเปลี่ยนแปลงทั้งหมดถูกทำผ่าน code</td>
      <td>การจัดการด้วย Ruby code ทั้งหมด อาจไม่เหมาะกับองค์กรที่ใช้ DBA แยก เพราะ DBA อาจจะเคืองถ้าโดนบังคับให้เรียน Ruby เพิ่ม 😂</td>
    </tr>
    <tr>
      <td>เพิ่ม abstraction layer ขึ้นมาเพื่อรองรับการเขียน code ครั้งเดียวให้ใช้ได้หลายฐานข้อมูล เช่น สามารถเปลี่ยนไปใช้ MySQL จาก PostgreSQL ได้ทันที</td>
      <td>การ execute คำสั่งโดยตรงอาจมีผลเสียกับ performance ในระบบฐานข้อมูลขนาดใหญ่ ต้องวางแผนให้ดี</td>
    </tr>
    <tr>
      <td>รองรับการ migrate ละ rollback ผ่านคำสั่งที่ program ได้</td>
      <td>ความเสี่ยงจากการทำ data loss ระหว่าง migration เหมือนข้างบน</td>
    </tr>
    <tr>
      <td>การเปลี่ยน schema แต่ล่ะครั้ง สามารถ test ได้</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="alternatively-ถ้าไม่ใช้-ruby-on-rails-แต่อยากได้แบบนี้จะใช้อะไรได้บ้าง">Alternatively ถ้าไม่ใช้ Ruby on Rails แต่อยากได้แบบนี้จะใช้อะไรได้บ้าง</h3>

<ul>
  <li>Liquibase</li>
  <li>Atlas</li>
  <li>golang-migrate</li>
  <li>Gorm</li>
  <li>Prisma</li>
  <li>etc.</li>
</ul>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="rails" /><category term="database" /><summary type="html"><![CDATA[ลองพยายามเขียนอะไรซักอย่างขึ้นมาอุดช่องว่าง สำหรับคนที่พอเข้าใจการทำงานของฐานข้อมูลอยู่แล้ว แต่แค่ไม่ได้ทำงานด้วย Ruby on Rails มาก่อน ให้สามารถเห็นภาพการทำงานที่ชัดขึ้น]]></summary></entry><entry><title type="html">Rate Limit ใน Ruby on Rails</title><link href="https://wittawasw.com/2024/04/19/rails-default-rate-limit.html" rel="alternate" type="text/html" title="Rate Limit ใน Ruby on Rails" /><published>2024-04-19T07:28:00+07:00</published><updated>2024-04-19T07:28:00+07:00</updated><id>https://wittawasw.com/2024/04/19/rails-default-rate-limit</id><content type="html" xml:base="https://wittawasw.com/2024/04/19/rails-default-rate-limit.html"><![CDATA[<p>Rate Limit เป็นหนึ่งในปัญหาที่ทุก tech stack มีวิธีการแก้ปัญหาที่คล้ายกัน ถึงแม้ว่ารายละเอียดการ
implement จะแตกต่างกันบ้าง แต่ลักษณะการทำงานเบื้องต้นจะคล้ายกันเสมอ คือ</p>

<ul>
  <li>request จาก client ไปถึง server</li>
  <li>server ทำการนับจำนวน request ที่เข้ามาแต่ล่ะครั้ง โดยเก็บจำนวนของ request ใน datastore</li>
  <li>ตรวจสอบว่า request ที่เข้ามาถ้านับรวมกับจำนวนเดิมที่เก็บ จะเกิน limit ตามที่กำหนดไว้หรือยัง
โดยอาจกำหนดเป็น limit ของจำนวนของ request ภายในช่วงเวลา เช่น
100 requests ต่อ 10 นาที</li>
  <li>ปฏิเสธ request ถ้า เกิน limit และยอมให้ผ่านไปถึง resource ได้ถ้าไม่เกิน</li>
</ul>

<h3 id="resource">Resource</h3>

<p>อาจหมายถึง database โดยตรงหรือ service อื่นที่เราต้องการลดความเสี่ยงที่จะ
ทำงานเกินกำลังและทำให้ระบบเกิด downtime หรือ error อื่นๆ</p>

<h3 id="datastore">Datastore</h3>

<p>ส่วนที่ใช้เก็บค่าจำนวน request ซึ่งเป็นได้ทั้งการเก็บโดยตรงภายในหน่วยความจำหรือการเก็บภายใน
ซอฟต์แวร์ฐานข้อมูล ขึ้นอยู่กับลักษณะการใช้งาน ที่หากเป็นการใช้ภายใน process เดียวกัน ก็อาจเก็บค่า
ภายในหน่วยความจำโดยตรง แต่หากมีจำนวน server ที่รองรับหลายอัน แล้วต้องการจำกัดจำนวน limit
ร่วมกันก็ควรใช้ซอฟต์แวร์ฐานข้อมูลช่วย</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--------+            +---------+            +-----------+
|        |-----------&gt;|         |-----------&gt;|           |
| Client |            | Server  |            | Resources |
|        |&lt;-----------|         |&lt;-----------|           |
+--------+            +---------+            +-----------+
                          |
                          |
                          v
                    +-------------+
                    |  Datastore  |
                    +-------------+
</code></pre></div></div>

<p style="text-align: center;"><em>แบบง่ายที่เป็นการใช้ภายใน process เดียว</em></p>
<p style="text-align: center;"><em>---------------------</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--------+            +--------+
|        |            |        |
|        |     ------&gt;| Server |&lt;-
|        |    /       |        |  \
|        |   /        +--------+   \
|        |  /         +--------+    \            +-----------+
|        |&lt;-          |        |     \           |           |
| Client |&lt;----------&gt;| Server |&lt;---------------&gt;| Resources |
|        |&lt;-          |        |&lt;-     \         |           |
|        |  \         +--------+  \     \        +-----------+
|        |   \        +--------+   \     \       +-------------+
|        |    \       |        |&lt;---------------&gt;|  Datastore  |
|        |     ------&gt;| Server |                 +-------------+
|        |            |        |
+--------+            +--------+
</code></pre></div></div>
<p style="text-align: center;"><em>แบบที่ใช้ datastore ร่วมกัน</em></p>

<h2 id="ความซับซ้อนที่เกิดขึ้นเสมอ">ความซับซ้อนที่เกิดขึ้นเสมอ</h2>

<p>หาก resource ที่เราต้องกันการเข้าถึง มีความต้องการในการจำกัดที่แตกต่างกัน รูปแบบการทำ
rate limit ก็จะเพิ่มความซับซ้อนและความยุ่งยากในการดูแลมากขึ้น แนวคิดและรูปแบบการทำ
rate limit ของ Rails จึงช่วยได้มาก หากไม่มีความเข้าใจ หรือไม่ต้องการ implement ด้วยตัวเอง</p>

<h2 id="ตัวอย่างการ-rate-limit-แยกตาม-controller-ของ-rails">ตัวอย่างการ Rate Limit แยกตาม controller ของ Rails</h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># จำกัด 10 requests ต่อ 3 นาที</span>
  <span class="c1"># ที่ method: :create เท่านั้น</span>
  <span class="n">rate_limit</span> <span class="ss">to: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">within: </span><span class="mi">3</span><span class="p">.</span><span class="nf">minutes</span><span class="p">,</span> <span class="ss">only: :create</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">SignupsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># จำกัด 1000 requests ต่อ 10 วินาที</span>
  <span class="c1"># แยกตาม domain name ที่ request</span>
  <span class="c1"># โดยให้ redirect ไปที่ busy_controller_url พร้อมกับ alert</span>
  <span class="c1"># ที่ method: :new เท่านั้น</span>
  <span class="n">rate_limit</span> <span class="ss">to: </span><span class="mi">1000</span><span class="p">,</span> <span class="ss">within: </span><span class="mi">10</span><span class="p">.</span><span class="nf">seconds</span><span class="p">,</span>
    <span class="ss">by: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="n">request</span><span class="p">.</span><span class="nf">domain</span> <span class="p">},</span>
    <span class="ss">with: </span><span class="o">-&gt;</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">busy_controller_url</span><span class="p">,</span> <span class="ss">alert: </span><span class="s2">"Too many signups on domain!"</span> <span class="p">},</span>
    <span class="ss">only: :new</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">APIController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># จำกัด 10 requests ต่อ 3 นาที</span>
  <span class="c1"># โดยใช้ datastore เป็น redis ที่ REDIS_URL</span>
  <span class="no">RATE_LIMIT_STORE</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Cache</span><span class="o">::</span><span class="no">RedisCacheStore</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">url: </span><span class="no">ENV</span><span class="p">[</span><span class="s2">"REDIS_URL"</span><span class="p">])</span>
  <span class="n">rate_limit</span> <span class="ss">to: </span><span class="mi">10</span><span class="p">,</span> <span class="ss">within: </span><span class="mi">3</span><span class="p">.</span><span class="nf">minutes</span><span class="p">,</span> <span class="ss">store: </span><span class="no">RATE_LIMIT_STORE</span>
<span class="k">end</span>
</code></pre></div></div>

<p>ที่มา: <a href="https://github.com/rails/rails/blob/main/actionpack/lib/action_controller/metal/rate_limiting.rb">github.com/rails/rails</a></p>

<blockquote>
  <p>ปัจจุบัน ณ วันที่เขียน blog นี้
feature ยังไม่ได้ถูก release เป็น version แต่ถูกรวมอยู่ใน <code class="language-plaintext highlighter-rouge">main</code> แล้ว</p>
</blockquote>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="rails," /><category term="rate" /><category term="limit" /><summary type="html"><![CDATA[Rate Limit เป็นหนึ่งในปัญหาที่ทุก tech stack มีวิธีการแก้ปัญหาที่คล้ายกัน ถึงแม้ว่ารายละเอียดการ implement จะแตกต่างกันบ้าง แต่ลักษณะการทำงานเบื้องต้นจะคล้ายกันเสมอ]]></summary></entry><entry><title type="html">วิธีใช้ ovpn profile ที่มี pin code ของ Pritunl ด้วย openvpn ผ่าน command-line</title><link href="https://wittawasw.com/2024/04/17/how-to-use-pritunl-ovpn-in-cli.html" rel="alternate" type="text/html" title="วิธีใช้ ovpn profile ที่มี pin code ของ Pritunl ด้วย openvpn ผ่าน command-line" /><published>2024-04-17T16:47:00+07:00</published><updated>2024-04-17T16:47:00+07:00</updated><id>https://wittawasw.com/2024/04/17/how-to-use-pritunl-ovpn-in-cli</id><content type="html" xml:base="https://wittawasw.com/2024/04/17/how-to-use-pritunl-ovpn-in-cli.html"><![CDATA[<p>นั่งหาวิธีการใช้ VPN profile ของ Pritunl ด้วย CLI เพราะเบื่อการที่ Pritunl Client มักจะหลุดและต้องมาคอยใส่ pin ใหม่อยู่เรื่อยๆ</p>

<h3 id="คำสั่งในการรัน-vpn">คำสั่งในการรัน VPN</h3>

<p>ใช้ client ของ openvpn โดยถ้าใน MacOS สามารถ install ผ่าน <a href="https://formulae.brew.sh/formula/openvpn">Homebrew</a> ได้</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># เมื่อ profile ที่ใช้อยู่ใน file ชื่อ profile.vpn</span>
<span class="c"># และ username, pin code อยู่ใน pass.txt</span>
<span class="c"># --daemon คือ การสั่งให้ daemonize process</span>
<span class="nb">sudo </span>openvpn <span class="nt">--config</span> profile.ovpn <span class="nt">--auth-user-pass</span> <span class="s2">"pass.txt"</span> <span class="nt">--daemon</span>
</code></pre></div></div>

<h3 id="ตัวอย่างไฟล์-passtxt">ตัวอย่างไฟล์ <code class="language-plaintext highlighter-rouge">pass.txt</code></h3>

<ul>
  <li>เมื่อ username = username@example.com</li>
  <li>และ pin code = 123456</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>username@example.com
123456
</code></pre></div></div>]]></content><author><name>wittawasw</name><email>your-email@domain.com</email></author><category term="pritunl," /><category term="vpn," /><category term="openvpn," /><category term="cli" /><summary type="html"><![CDATA[นั่งหาวิธีการใช้ VPN profile ของ Pritunl ด้วย CLI เพราะเบื่อการที่ Pritunl Client มักจะหลุดและต้องมาคอยใส่ pin ใหม่อยู่เรื่อยๆ]]></summary></entry></feed>