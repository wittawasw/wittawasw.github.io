I"^<blockquote>
  <p>The setup need DigitalOcean account and Domain on DigitalOcean’s nameserver.
Otherwise, it’d need a different step to complete.</p>
</blockquote>

<p>If you need a good HTTPS proxies that come with auto <a href="https://letsencrypt.org/">Let’s Encrypt</a>
certificates and already a user of DigitalOcean. Here I’ve got an easy but solid
way to deploy one. Already using this on a production servers with no problem
so far.</p>

<blockquote>
  <p><a href="https://caddyserver.com/">Caddy</a> server is already the easiest server that
you can <a href="https://caddyserver.com/tutorial">install</a> on Linux. But I decided to
use docker with it because it’s easier for me to control volume and settings.</p>
</blockquote>

<h3 id="from-beginning-to-deploy">From beginning to deploy.</h3>
<ul>
  <li>Setup domain to use DigitalOcean’s nameserver.</li>
  <li>Create droplet using pre-defined <code class="language-plaintext highlighter-rouge">docker</code> droplet.</li>
  <li>Add <code class="language-plaintext highlighter-rouge">A</code> or <code class="language-plaintext highlighter-rouge">CNAME</code> that point domain to droplet’s IP address.</li>
  <li><code class="language-plaintext highlighter-rouge">SSH</code> into droplet and create directory <code class="language-plaintext highlighter-rouge">caddy</code> in home directory.</li>
  <li>Enable <code class="language-plaintext highlighter-rouge">ufw</code> port <code class="language-plaintext highlighter-rouge">443</code>.</li>
  <li>Create DigitalOcean auth token and keep it close.</li>
  <li>Create <code class="language-plaintext highlighter-rouge">Caddyfile</code> in home directory.</li>
  <li>Create <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> in home directory.</li>
  <li>From home directory, use command <code class="language-plaintext highlighter-rouge">docker-compose up -d</code></li>
  <li>Caddy’s online. That’s it. No more hassle.</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml">  <span class="c1"># proxy's url (domain that we set record earlier.)</span>
<span class="s">front-end-url:443 {</span>
  <span class="s"># backend's servers can be single or multiple servers</span>
  <span class="s"># SSL terminate here.</span>
  <span class="s">proxy / backend-url-1:80 backend-url-2:80 backend-url-3:80 {</span>
    <span class="s">policy round_robin</span>
    <span class="s">header_upstream Host {host}</span>
    <span class="s">header_upstream X-Real-IP {remote}</span>
    <span class="s">header_upstream X-Forwarded-For {remote}</span>
    <span class="s">header_upstream X-Forwarded-Proto {scheme}</span>
  <span class="s">}</span>

  <span class="s">gzip</span>

  <span class="s">tls {</span>
   <span class="s"># verify ssl certificate using dns from DigitalOcean really save me from a lot of pain.</span>
   <span class="s">dns digitalocean</span>
  <span class="s">}</span>
<span class="err">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">proxy</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">zzrot/alpine-caddy</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span>   <span class="s">443:443</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span>   <span class="s">./Caddyfile:/etc/Caddyfile</span>
      <span class="pi">-</span>   <span class="s">./caddy:/root/.caddy</span>
      <span class="c1"># don't forget to add volume, otherwise you will request new certificate</span>
      <span class="c1"># every time server restart and exceed letsencrypt quota in the process.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">DO_AUTH_TOKEN=&lt;DO_ACCOUNT_TOKEN&gt;</span>
      <span class="c1"># get this token from setting page.</span></code></pre></figure>

<h3 id="where-to-go-from-here">Where to go from here</h3>
<p>See official <a href="https://caddyserver.com/docs">documentation</a> of Caddy. There’s a
lot of features that can be easily setup using simple directives.</p>
:ET