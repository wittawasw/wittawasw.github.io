I"š<blockquote>
  <p>Keyword Arguments make building and maintaining Ruby methods easier and
clearer than normal method declaration.</p>
</blockquote>

<p>Keyword Arguments in Ruby is one of the good things that my colleages tend to
ignore by not using it. Despite that it doesnâ€™t have any proper downside of
using it and come with many good points.</p>

<h3 id="it-make-method-clearer-at-first-glance">It make method clearer at first glance.</h3>
<p>This is obvious. I donâ€™t have to look for source of method when I see the
method being called at other places.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="c1"># normal initializer</span>
<span class="k">class</span> <span class="nc">Post</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
    <span class="vi">@subject</span> <span class="o">=</span> <span class="n">subject</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># you will have to find the above Class to understand just this line.</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">,</span> <span class="s1">'this is a msg'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>compare to how Keyword Arguments work</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="c1"># initializer with keywords</span>
<span class="k">class</span> <span class="nc">Post</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">subject</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="vi">@subject</span> <span class="o">=</span> <span class="n">subject</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># likely to understand the basic functionality at firstglance</span>
<span class="no">Post</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">subject: </span><span class="s1">'hello'</span><span class="p">,</span>
         <span class="ss">body: </span><span class="s1">'this is a msg'</span><span class="p">,</span>
        <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Â </p>

<h3 id="better-understanding-error-message">Better understanding error message.</h3>
<p>Keyword Arguments methods provide better error message when thing gone wrong.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Post.new('hello')</span>
ArgumentError: wrong number of arguments<span class="o">(</span>given 1, expected 2<span class="o">)</span>

<span class="c"># Post.new(title: 'hello')</span>
ArgumentError: missing keyword: body</code></pre></figure>

<p>Â </p>

<h3 id="default-setter-and-required-key">Default setter and required key</h3>
<p>This is indeed useful, for you can quickly look at given params and understand
what needs to be done almost immediately.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Post</span>
  <span class="c1"># default setter for :title to be 'untitled' if nil</span>
  <span class="c1"># required key :body if leave the setter blank.</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">title: </span><span class="s1">'untitled'</span><span class="p">,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>
<span class="k">end</span><span class="p">)</span></code></pre></figure>

<p>Â </p>

:ET